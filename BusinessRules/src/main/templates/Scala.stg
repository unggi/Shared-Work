group ScalaCodeGeneration;

FileBodyHeader(fileBody, package, className) ::= <<
package <package>

<Imports()>

public class <className> {

>>

Imports() ::= <<
 // No Imports
>>

RuleSet(declarations) ::= <<
//
// Rules are each an object.
//

<declarations.declaration: Rule()>

>>

FileBodyFooter(fileBody, package, className) ::= <<
}
>>

Rule(declaration) ::= <<
    //
    // <declaration.validationRule.name.text>
    //
    <RuleClass(ID(declaration.validationRule.name.text), declaration.validationRule.name.text, declaration.validationRule.context, declaration.validationRule.constraint)>

>>

ID(text) ::= <%
    <text; format="identifier">
%>


RuleClass(className,ruleName, context, constraint) ::= <<

class <className>(<ruleName>) extends Rule {
    def evaluate(<InputParamList(context)>): Boolean = {
        <Constraint(constraint)>
    }
}

>>

InputParamList(context) ::= <%
  <if(context.modelReferenceWithAlias)><InputParam(context.modelReferenceWithAlias)><endif>
%>

InputParam(reference) ::= <%
    <reference.alias.text; format="unquoted">: <reference.ref.text>
%>

Constraint(constraint) ::= <%
<if (constraint.condBlock)>
   <IfThenConstraint(constraint.condBlock, constraint.thenBlock)>
<else>
    No Conditional
<endif>
%>

IfThenConstraint(cond, then) ::= <<
if (<LogicalStatement(cond)>) {
    <LogicalStatement(then)>
}
>>

LogicalStatement(stmt) ::= <%
<if (stmt.predicate)>
    <(stmt.predicate.class.simpleName)(stmt.predicate)>
<endif>
%>

IsKindOfPredicateContext(predicate) ::= <%
 <predicate.modelReference.text>.isInstanceOf[<predicate.ModelElementName.text>]
%>

BinaryPredicateContext(predicate) ::= <<
    BinaryPredicate(<predicate.text>)
   /*
   <Show(predicate)>
   */

>>





ShowMethods(node) ::= <<
    <[node.class.declaredMethods,node.class.declaredFields]:ShowMethod(); separator="\n">
>>

ShowMethod(m) ::= <<
<m.name; format="%-20s"> defined in <m.declaringClass.simpleName>
>>

Show(node) ::= <<
    <node.Class.SimpleName>(<node.text>)
    <node.children:Show()>
>>
