group ScalaCodeGeneration;

FileBodyHeader(fileBody, package, className) ::= <<
package <package>

<Imports()>

public class <className> {

>>

Imports() ::= <<
 // No Imports
>>

RuleSet(declarations) ::= <<
//
// Rules are each an object.
//

<declarations.declaration: Rule()>
>>

FileBodyFooter(fileBody, package, className) ::= <<
}
>>

Rule(declaration) ::= <<
    //
    // <declaration.validationRule.name.text>
    //
    <RuleClass(ID(declaration.validationRule.name.text), declaration.validationRule.name.text, declaration.validationRule.context, declaration.validationRule.constraint)>

>>

ID(text) ::= <%<text; format="identifier">%>


RuleClass(className,ruleName, context, constraint) ::= <<

class <className>(<ruleName>) extends Rule {
    def evaluate(<InputParamList(context)>): Boolean = {
        <Constraint(constraint)>
    }
}
>>

InputParamList(context) ::= <%
  <if(context.modelReferenceWithAlias)><InputParam(context.modelReferenceWithAlias)><endif>
%>

InputParam(reference) ::= <%<reference.alias.text; format="unquoted">: <reference.ref.text>%>

Constraint(constraint) ::= <%
<if (constraint.condBlock)>
   <IfThenConstraint(constraint.condBlock, constraint.thenBlock)>
<else>
    No Conditional
<endif>
%>

IfThenConstraint(cond, then) ::= <<
if (<LogicalStatement(cond)>) {
    if (<LogicalStatement(then)>)
        true
    else
        false
}
>>

LogicalStatement(stmt) ::= <%<Apply(stmt.predicate,stmt.predicate)>%>

IsKindOfPredicateContext(predicate) ::= <%
<predicate.modelReference.text>.isInstanceOf[<predicate.ModelElementName.text>]
%>

BinaryPredicateContext(predicate) ::= <%
<Apply(predicate.left,predicate.left)> <Apply(predicate.comparator,predicate.comparator)> <Apply(predicate.right,predicate.right)>
%>

UnaryExpressionContext(expr) ::= <%<(expr.term.class.simpleName)(expr.term)>%>

IsEqualToComparatorContext(comparator) ::= " == "

TermContext(term) ::= <%<(term.class.simpleName)(term)>%>

IdentifierTermContext(term) ::= <%<Apply(first(term.children),first(term.children))>%>

IntegerNumberIdentifierContext(integer) ::= <%<trim(integer.text)>%>

FunctionalExpressionTermContext(fn) ::= <%<FunctionalExpressionContext(fn.functionalExpression)>%>

FunctionalExpressionContext(fn) ::= <%<(fn.class.simpleName)(fn.ref)>%>

NumberOfExpressionContext(ref) ::= <%(<(ref.class.simpleName)(ref)>).size %>

ModelReferenceContext(ref) ::= <%<ref.children:{ p |<(p.class.simpleName)(p)>}>%>

DottedModelPathContext(path) ::= <%<path.children;separator=".">%>

Apply(template, arg) ::= <%<(template.class.simpleName)(arg)>%>

ShowMethods(node) ::= <<
    <[node.class.declaredMethods]:ShowMethod(); separator="\n">
>>

ShowMembers(node) ::= <<
    <[node.class.declaredMethods,node.class.declaredFields]:ShowMethod(); separator="\n">
>>

ShowMethod(m) ::= <<
<m.name; format="%-20s"> defined in <m.declaringClass.simpleName>
>>

Show(node) ::= <<
    <node.Class.SimpleName>(<node.text>)
    <node.children:Show()>
>>
